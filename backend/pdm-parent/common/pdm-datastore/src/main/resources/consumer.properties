# kafka property

# Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.
value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

# A unique string that identifies the consumer group this consumer belongs to. This property is
# required if the consumer uses either the group management functionality by using subscribe(topic)
# or the Kafka-based offset management strategy.
#group.id=pdm-store

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
# The client will make use of all servers irrespective of which servers are specified here for
# bootstrappingâ€”this list only impacts the initial hosts used to discover the full set of servers.
# This list should be in the form host1:port1,host2:port2,.... Since these servers are just used
# for the initial connection to discover the full cluster membership (which may change dynamically),
# this list need not contain the full set of servers (you may want more than one, though, in case a server is down).
bootstrap.servers=192.168.7.228:29092,192.168.7.228:39092,192.168.7.228:49092

# What to do when there is no initial offset in Kafka or if the current offset does not exist any more
# on the server (e.g. because that data has been deleted):
#   earliest: automatically reset the offset to the earliest offset
#   latest: automatically reset the offset to the latest offset
#   none: throw exception to the consumer if no previous offset is found for the consumer's group
#   anything else: throw exception to the consumer.
auto.offset.reset=latest

# If true the consumer's offset will be periodically committed in the background.
enable.auto.commit=false

# Close idle connections after the number of milliseconds specified by this config.
connections.max.idle.ms=540000

# Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.
#security.protocol=SASL_SSL

# SASL mechanism used for client connections. This may be any mechanism for which a security provider
# is available. GSSAPI is the default mechanism.
#sasl.mechanism=PLAIN

# The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases.
# Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported
# in older JVMs, but their usage is discouraged due to known security vulnerabilities.
#ssl.protocol=TLSv1.2

# The list of protocols enabled for SSL connections.
#ssl.enabled.protocols=TLSv1.2

# The location of the trust store file.
#ssl.truststore.location=

# The password for the trust store file. If a password is not set access to the truststore is still
# available, but integrity checking is disabled.
#ssl.truststore.password=changeit

# The file format of the trust store file.
#ssl.truststore.type=JKS

# The endpoint identification algorithm to validate server hostname using server certificate.
#ssl.endpoint.identification.algorithm=HTTPS

# JAAS login context parameters for SASL connections in the format used by JAAS configuration files.
# JAAS configuration file format is described here. The format for the value is: ' (=)*;'
#sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="USERNAME" password="PASSWORD";